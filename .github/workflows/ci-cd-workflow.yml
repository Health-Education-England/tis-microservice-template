name: CI/CD Workflow

on:
  push:
  repository_dispatch:
    types: [run_ci-cd]

jobs:
  assemble:
    name: Assemble JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-jar
          path: build/libs/*.jar

  check:
    name: Perform checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Run Gradle checks
        run: ./gradlew check -x test

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: build/reports

  test:
    name: Run automated tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Run Gradle tests
        run: ./gradlew test

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: build/reports

  analyze:
    name: Perform quality analysis
    needs: [check, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: reports
          path: build/reports

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Run quality analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube

# TODO: Uncomment the below jobs.
#  backup-artifacts:
#    name: Backup build artifacts
#    needs: [assemble, check, test]
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Download build artifacts
#        uses: actions/download-artifact@v2
#        with:
#          path: build-artifacts
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-west-2
#
#      - name: Backup build artifacts
#        run: |
#          workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')
#          aws s3 sync build-artifacts s3://tis-build-artifacts/${{ github.event.repository.name }}/$workflow/${{ github.run_number }}
#
#  dockerize:
#    name: Dockerize
#    needs: [assemble]
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/master'
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Download build artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: app-jar
#          path: build/libs
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-west-2
#
#      - name: Log in to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ github.event.repository.name }}
#        run: |
#          ./gradlew bootBuildImage --imageName=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
#          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY
#
#  deploy:
#    name: Deploy
#    needs: dockerize
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-west-2
#
#      - name: Log in to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: .aws/task-definition.json
#          container-name: ${{ github.event.repository.name }}
#          image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ github.sha }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          # TODO: service name if different
#          service: ${{ github.event.repository.name }
#          # TODO: cluster name
#          cluster:
#          wait-for-service-stability: true
